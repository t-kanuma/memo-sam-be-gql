AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: MemoAppのバックエンド(AppSync版)

Globals:
  Function:
    Runtime: nodejs18.x
    Handler: app.lambdaHandler
    Timeout: 3
    Architectures:
      - x86_64
    MemorySize: 128
    Layers:
      - !Ref Layer
    Environment:
      Variables:
        REGION: !Ref AWS::Region
        TABLE_NAME: !Sub ${AppName}-Memo-${StageName}

Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  AppName:
    Type: String
    Default: MemoAppGql
  NotifyNewMemoQueueName:
    Type: String
    Default: MemoApp-NotifyNewMemo-SourceQueue

Resources:
  Api:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AppName}-Gql-Api-${StageName}
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
  GqlSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DefinitionS3Location: src/gql/schema.graphql

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-UserPool-${StageName}
      # example...
      # Policies:
      #   PasswordPolicy:
      #     MinimumLength: 8
      # UsernameAttributes:
      #   - email
      # Schema:
      #   - AttributeDataType: String
      #     Name: email
      #     Required: false

  # Vueアプリのこと
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AppName}-UserPoolClient-${StageName}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # Policies
  MemoTableAccessFuncPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "memo-table-gql-func-policy"
      Roles:
        - !Ref MemoTableAccessFuncRole
        - !Ref CreateMemoFuncRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - dynamodb:Put*
              - dynamodb:Create*
              - dynamodb:BatchWriteItem
              - dynamodb:Get*
              - dynamodb:BatchGetItem
              - dynamodb:List*
              - dynamodb:Describe*
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:Update*
              - dynamodb:RestoreTable*
              - dynamodb:Delete*
            Resource: !Sub
              - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
              - TableName: !Sub ${AppName}-Memo-${StageName}

  NotifyNewMemoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "notify-new-gql-memo-policy"
      Roles:
        - !Ref CreateMemoFuncRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - sqs:SendMessage
            Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${NotifyNewMemoQueueName}-${StageName}"

  # Roles
  ## createMemo以外のFunction
  MemoTableAccessFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ## CreateMemoFunctionのRole
  CreateMemoFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ## DataSource共通のRole
  LambdaInvokeDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "lambda-invoke-datasource-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"

  ## Query:memosについて
  MemosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt MemosDataSource.Name
      TypeName: Query
      FieldName: memos

  MemosDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Description: Datasource for Memos Query
      Name: !Sub ${AppName}MemosDS${StageName}
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetMemosFunc.Arn
      ServiceRoleArn: !GetAtt LambdaInvokeDataSourceRole.Arn

  GetMemosFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-GetMemos-${StageName}
      CodeUri: src/functions/getMemos/
      Role: !GetAtt MemoTableAccessFuncRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - memoapp-gql-common

  ## Mutation:createMemoについて
  CreateMemoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt CreateMemoDataSource.Name
      TypeName: Mutation
      FieldName: createMemo

  CreateMemoDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Description: Datasource for CreateMemo mutation
      Name: !Sub ${AppName}CreateMemoDS${StageName}
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt CreateMemoFunc.Arn
      ServiceRoleArn: !GetAtt LambdaInvokeDataSourceRole.Arn

  CreateMemoFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-CreateMemo-${StageName}
      CodeUri: src/functions/createMemo/
      Role: !GetAtt CreateMemoFuncRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${NotifyNewMemoQueueName}-${StageName}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - memoapp-gql-common

  ## Mutation:updateMemoについて
  UpdateMemoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt UpdateMemoDataSource.Name
      TypeName: Mutation
      FieldName: updateMemo

  UpdateMemoDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Description: Datasource for UpdateMemo mutation
      Name: !Sub ${AppName}UpdateMemoDS${StageName}
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UpdateMemoFunc.Arn
      ServiceRoleArn: !GetAtt LambdaInvokeDataSourceRole.Arn

  UpdateMemoFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-UpdateMemo-${StageName}
      CodeUri: src/functions/updateMemo/
      Role: !GetAtt MemoTableAccessFuncRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - memoapp-gql-common

  ## Mutation:deleteMemoについて
  DeleteMemoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt DeleteMemoDataSource.Name
      TypeName: Mutation
      FieldName: deleteMemo
  DeleteMemoDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Description: Datasource for DeleteMemo mutation
      Name: !Sub ${AppName}DeleteMemoDS${StageName}
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt DeleteArchiveFunc.Arn
      ServiceRoleArn: !GetAtt LambdaInvokeDataSourceRole.Arn
  DeleteArchiveFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-DeleteArchive-${StageName}
      CodeUri: src/functions/deleteArchive/
      Role: !GetAtt MemoTableAccessFuncRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - memoapp-gql-common

  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete
      ContentUri: layers
      LayerName: !Sub ${AppName}-Layers

  MemoTbl:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AppName}-Memo-${StageName}
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  MemoAppGraphQLEndpoint:
    Description: "Memo App's AppSync Endpoint URL"
    Value: !GetAtt Api.GraphQLUrl
  GetMemosFunc:
    Description: "get memos lambda function ARN"
    Value: !GetAtt GetMemosFunc.Arn
  CreateMemoFunc:
    Description: "createa memo lambda function ARN"
    Value: !GetAtt CreateMemoFunc.Arn
  UpdateMemoFunc:
    Description: "update memo lambda function ARN"
    Value: !GetAtt UpdateMemoFunc.Arn
  DeleteArchiveFunc:
    Description: "delete archive lambda function ARN"
    Value: !GetAtt DeleteArchiveFunc.Arn
  MemoTableAccessFuncRole:
    Description: "Implicit IAM Role created for lambda functions that access memo table."
    Value: !GetAtt MemoTableAccessFuncRole.Arn
